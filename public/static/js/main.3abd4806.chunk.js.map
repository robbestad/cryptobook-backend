{"version":3,"sources":["components/Asset.tsx","reportWebVitals.ts","index.tsx"],"names":["Asset","asset","useParams","useState","chartData","setChartData","tokenId","setTokenId","loading","setLoading","values","setValues","avgVolume","setAvgVolume","avgPrice","setAvgPrice","useEffect","fetch","then","data","json","metrics","id","timeSeries","map","val","forEach","Math","floor","length","className","type","color","height","width","timeout","src","to","highcharts","Highcharts","options","title","text","name","xAxis","labels","formatter","dateFormat","this","value","series","slug","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.3abd4806.chunk.js","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts/highstock\";\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink, useParams } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nimport \"./Asset.css\";\n\ntype ChartValue = [number, number];\ntype ValuesSchema = [number, number, number, number, number, number];\n\ninterface Chart {\n  timeSeries: {\n    data: {\n      values: Array<ChartValue>;\n    };\n  };\n  metrics: {\n    data: {\n      name: string;\n      slug: string;\n    };\n  };\n}\n\nfunction Asset() {\n  const { asset } = useParams<{ asset: string }>();\n  const [chartData, setChartData] = useState<Chart | undefined>();\n  const [tokenId, setTokenId] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>();\n  const [values, setValues] = useState<Array<ChartValue>>();\n  const [avgVolume, setAvgVolume] = useState(0);\n  const [avgPrice, setAvgPrice] = useState(0);\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/api/asset/${asset}`)\n      .then((data) => data.json())\n      .then((data) => {\n        setLoading(false);\n        setChartData(data);\n        setTokenId(data.metrics.data.id);\n        setValues(\n          data.timeSeries.data.values.map((val: ValuesSchema) => [\n            val[0],\n            val[4],\n          ])\n        );\n        let avgVolume = 0;\n        let avgPrice = 0;\n        data.timeSeries.data.values.forEach((val: ValuesSchema) => {\n          avgPrice += val[4];\n          avgVolume += val[5];\n        });\n        setAvgVolume(\n          Math.floor(avgVolume / data.timeSeries.data.values.length)\n        );\n        setAvgPrice(avgPrice / data.timeSeries.data.values.length);\n      });\n  }, [asset]);\n\n  if (loading) {\n    return (\n      <div className={\"spinner\"}>\n        {\" \"}\n        <Loader\n          type=\"Hearts\"\n          color=\"#00BFFF\"\n          height={100}\n          width={100}\n          timeout={15000}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Asset\">\n      <header className=\"Asset-header\">\n        <img src={`https://messari.io/asset-images/${tokenId}/32.png?v=2`} />{\" \"}\n        Daily closing prices\n      </header>\n\n      <div className={\"charts-assets\"}>\n        <ul className={\"asset-list\"}>\n          <li>\n            <NavLink to={\"/asset/btc\"}>Bitcoin</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/eth\"}>Ethereum</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/sol\"}>Solana</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/ada\"}>Cardano</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/bnb\"}>BNB</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/fun\"}>FUN</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/ray\"}>Ray</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/cake\"}>Cake</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/dot\"}>Dot</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/luna\"}>Luna</NavLink>\n          </li>\n          <li>\n            <NavLink to={\"/asset/vet\"}>Vechain</NavLink>\n          </li>\n        </ul>\n\n        <HighchartsReact\n          highcharts={Highcharts}\n          className={\"test\"}\n          options={{\n            title: {\n              text: chartData?.metrics.data.name,\n            },\n            xAxis: {\n              type: \"datetime\",\n              labels: {\n                formatter: function (): any {\n                  // @ts-ignore\n                  return Highcharts.dateFormat(\"%e. %b\", this.value);\n                },\n              },\n            },\n            series: [\n              {\n                type: \"line\",\n                name: chartData?.metrics.data.slug,\n                data: values,\n              },\n            ],\n          }}\n        />\n      </div>\n      <div>\n        <div className={\"averages\"}>\n          <div>\n            Average price:{\" \"}\n            {new Intl.NumberFormat(\"en-US\", {\n              style: \"currency\",\n              currency: \"USD\",\n              minimumFractionDigits: 3,\n              maximumFractionDigits: 6,\n            }).format(avgPrice)}\n          </div>\n          <div>\n            Average trading volume:{\" \"}\n            {new Intl.NumberFormat(\"en-US\", {\n              style: \"currency\",\n              currency: \"USD\",\n            }).format(avgVolume)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Asset;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Asset from \"./components/Asset\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/asset\" render={() => <Asset />} />\n        <Route exact path=\"/asset/:asset\" render={() => <Asset />} />\n        <Redirect to=\"/asset/btc\" />\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}