{"version":3,"sources":["components/Asset.tsx","reportWebVitals.ts","index.tsx"],"names":["Asset","asset","useParams","useState","chartData","setChartData","tokenId","setTokenId","loading","setLoading","values","setValues","avgVolume","setAvgVolume","avgPrice","setAvgPrice","useEffect","fetch","then","data","json","metrics","id","timeSeries","map","val","forEach","Math","floor","length","className","type","color","height","width","timeout","src","to","highcharts","Highcharts","options","title","text","name","xAxis","labels","formatter","dateFormat","this","value","series","slug","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.bd440732.chunk.js","sourcesContent":["import HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts/highstock\";\nimport React, {useEffect, useState} from \"react\";\nimport {NavLink, useParams} from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\n\nimport \"./Asset.css\";\n\ntype ChartValue = [number, number];\ntype ValuesSchema = [number, number, number, number, number, number];\n\ninterface Chart {\n    timeSeries: {\n        data: {\n            values: Array<ChartValue>\n        }\n    },\n    metrics: {\n        data: {\n            name: string,\n            slug: string\n        }\n    }\n}\n\nfunction Asset() {\n    const {asset} = useParams<{ asset: string }>();\n    const [chartData, setChartData] = useState<Chart | undefined>();\n    const [tokenId, setTokenId] = useState<string>(\"\");\n    const [loading, setLoading] = useState<boolean>();\n    const [values, setValues] = useState<Array<ChartValue>>();\n    const [avgVolume, setAvgVolume] = useState(0);\n    const [avgPrice, setAvgPrice] = useState(0);\n    useEffect(() => {\n        setLoading(true);\n        fetch(`/api/asset/${asset}`)\n            .then(data => data.json())\n            .then(data => {\n                setLoading(false);\n                setChartData(data);\n                setTokenId(data.metrics.data.id);\n                setValues(data.timeSeries.data.values.map((val: ValuesSchema) => [val[0], val[4]]));\n                let avgVolume =0;\n                let avgPrice=0;\n                data.timeSeries.data.values.forEach((val:ValuesSchema)=> {\n                    avgPrice += val[4];\n                    avgVolume += val[5];\n                });\n                setAvgVolume(Math.floor(avgVolume/data.timeSeries.data.values.length));\n                setAvgPrice((avgPrice/data.timeSeries.data.values.length));\n            });\n    }, [asset]);\n\n    if (loading) {\n        return <div className={\"spinner\"}> <Loader\n            type=\"Hearts\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n            timeout={15000}\n        /></div>;\n    }\n\n    return (\n        <div className=\"Asset\">\n            <header className=\"Asset-header\">\n                <img src={`https://messari.io/asset-images/${tokenId}/32.png?v=2`}/> Daily closing prices\n            </header>\n\n            <div className={\"charts-assets\"}>\n                    <ul className={\"asset-list\"}>\n                        <li><NavLink to={\"/asset/btc\"}>Bitcoin</NavLink></li>\n                        <li><NavLink to={\"/asset/eth\"}>Ethereum</NavLink></li>\n                        <li><NavLink to={\"/asset/sol\"}>Solana</NavLink></li>\n                        <li><NavLink to={\"/asset/ada\"}>Cardano</NavLink></li>\n                        <li><NavLink to={\"/asset/bnb\"}>BNB</NavLink></li>\n                        <li><NavLink to={\"/asset/fun\"}>FUN</NavLink></li>\n                        <li><NavLink to={\"/asset/ray\"}>Ray</NavLink></li>\n                        <li><NavLink to={\"/asset/cake\"}>Cake</NavLink></li>\n                        <li><NavLink to={\"/asset/dot\"}>Dot</NavLink></li>\n                        <li><NavLink to={\"/asset/luna\"}>Luna</NavLink></li>\n                        <li><NavLink to={\"/asset/vet\"}>VET</NavLink></li>\n                    </ul>\n\n            <HighchartsReact\n                highcharts={Highcharts}\n                className={\"test\"}\n                options={{\n                    title: {\n                        text: chartData?.metrics.data.name\n                    },\n                    xAxis: {\n                        type: \"datetime\",\n                        labels: {\n                            formatter: function (): any {\n                                // @ts-ignore\n                                return Highcharts.dateFormat(\"%e. %b\", this.value);\n                            }\n                        }\n                    },\n                    series: [{\n                        type: \"line\",\n                        name: chartData?.metrics.data.slug,\n                        data: values\n                    }]\n                }\n                }\n            />\n            </div>\n            <div>\n                <div className={\"averages\"}>\n                    <div>\n                    Average price: {new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 3, maximumFractionDigits: 6 }).format(avgPrice)}\n                    </div>\n                    <div>\n                    Average trading volume: {new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(avgVolume)}\n                    </div>\n                </div>\n            </div>\n        </div>);\n}\n\nexport default Asset;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Asset from \"./components/Asset\"\nimport reportWebVitals from \"./reportWebVitals\";\nimport {BrowserRouter, Route, Redirect, Switch,} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/asset\" render={() => <Asset/>}/>\n                <Route exact path=\"/asset/:asset\" render={() => <Asset/>}/>\n                <Redirect to=\"/asset/btc\"/>\n            </Switch>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}